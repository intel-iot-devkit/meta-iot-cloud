From 03d0127bf99d6799276e1d6fbde0374bc368ee32 Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Tue, 28 Dec 2021 15:38:34 +0800
Subject: [PATCH] Build shared and static libs

Signed-off-by: Scott Ware <scott.r.ware@intel.com>

Upstream-Status: Inappropriate [oe specific]
Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 CMakeLists.txt         | 53 +++++++++++++++++++++++++++++++++++-------
 cmake/s2n-config.cmake |  6 +----
 2 files changed, 46 insertions(+), 13 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e47219c5..9cbec456 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -275,9 +275,12 @@ file(GLOB S2N_SRC
     ${UTILS_SRC}
 )
 
-add_library(${PROJECT_NAME} ${S2N_HEADERS} ${S2N_SRC})
+add_library(${PROJECT_NAME} SHARED ${S2N_HEADERS} ${S2N_SRC})
 set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C SOVERSION ${PROJECT_VERSION_MAJOR} VERSION ${PROJECT_VERSION})
 
+add_library(${PROJECT_NAME}_static STATIC ${S2N_HEADERS} ${S2N_SRC})
+set_target_properties(${PROJECT_NAME}_static PROPERTIES LINKER_LANGUAGE C OUTPUT_NAME ${PROJECT_NAME})
+
 set(CMAKE_C_FLAGS_DEBUGOPT "")
 
 target_compile_options(${PROJECT_NAME} PRIVATE -pedantic -std=gnu99 -Wall -Wimplicit -Wunused -Wcomment -Wchar-subscripts
@@ -288,14 +291,25 @@ target_compile_options(${PROJECT_NAME} PRIVATE -pedantic -std=gnu99 -Wall -Wimpl
         -Wno-missing-braces -Wa,--noexecstack
 )
 
+target_compile_options(${PROJECT_NAME}_static PRIVATE -pedantic -std=gnu99 -Wall -Wimplicit -Wunused -Wcomment -Wchar-subscripts
+        -Wuninitialized -Wshadow -Wcast-qual -Wcast-align -Wwrite-strings -Wno-deprecated-declarations -Wno-unknown-pragmas -Wformat-security
+        -Wno-error=array-parameter -Wno-error=discarded-qualifiers -Wno-error=analyzer-null-dereference
+        -Wno-error=analyzer-file-leak -Wno-error=analyzer-malloc-leak -Wno-error=analyzer-possible-null-dereference
+        -Wno-error=stringop-overflow -Wno-error=stringop-overread
+        -Wno-missing-braces -Wa,--noexecstack
+)
+
 if (UNSAFE_TREAT_WARNINGS_AS_ERRORS)
     target_compile_options(${PROJECT_NAME} PRIVATE -Werror )
+    target_compile_options(${PROJECT_NAME}_static PRIVATE -Werror )
 endif ()
 
 if(BUILD_TESTING AND BUILD_SHARED_LIBS)
     target_compile_options(${PROJECT_NAME} PRIVATE -fvisibility=default)
+    target_compile_options(${PROJECT_NAME}_static PRIVATE -fvisibility=default)
 else()
     target_compile_options(${PROJECT_NAME} PRIVATE -fvisibility=hidden -DS2N_EXPORTS)
+    target_compile_options(${PROJECT_NAME}_static PRIVATE -fvisibility=hidden -DS2N_EXPORTS)
 endif()
 
 if(NOT APPLE)
@@ -304,10 +318,12 @@ endif()
 
 if(S2N_NO_PQ)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_NO_PQ)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_NO_PQ)
 endif()
 
 if(SIKEP434R3_ASM_SUPPORTED)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_SIKE_P434_R3_ASM)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_SIKE_P434_R3_ASM)
     message(STATUS "Enabling SIKEP434R3 assembly code")
 endif()
 
@@ -319,24 +335,28 @@ if(BIKE_R3_X86_64_OPT_SUPPORTED)
         FILE(GLOB BIKE_R3_AVX2_SRCS "pq-crypto/bike_r3/*_avx2.c")
         set_source_files_properties(${BIKE_R3_AVX2_SRCS} PROPERTIES COMPILE_FLAGS -mavx2)
         target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_BIKE_R3_AVX2)
+	target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_BIKE_R3_AVX2)
     endif()
 
     if(BIKE_R3_AVX512_SUPPORTED)
         FILE(GLOB BIKE_R3_AVX512_SRCS "pq-crypto/bike_r3/*_avx512.c")
         set_source_files_properties(${BIKE_R3_AVX512_SRCS} PROPERTIES COMPILE_FLAGS ${BIKE_R3_AVX512_FLAGS})
         target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_BIKE_R3_AVX512)
+	target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_BIKE_R3_AVX512)
     endif()
 
     if(BIKE_R3_PCLMUL_SUPPORTED)
         FILE(GLOB BIKE_R3_PCLMUL_SRCS "pq-crypto/bike_r3/*_pclmul.c")
         set_source_files_properties(${BIKE_R3_PCLMUL_SRCS} PROPERTIES COMPILE_FLAGS ${BIKE_R3_PCLMUL_FLAGS})
         target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_BIKE_R3_PCLMUL)
+	target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_BIKE_R3_PCLMUL)
     endif()
 
     if(BIKE_R3_VPCLMUL_SUPPORTED)
         FILE(GLOB BIKE_R3_VPCLMUL_SRCS "pq-crypto/bike_r3/*_vpclmul.c")
         set_source_files_properties(${BIKE_R3_VPCLMUL_SRCS} PROPERTIES COMPILE_FLAGS ${BIKE_R3_VPCLMUL_FLAGS})
         target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_BIKE_R3_VPCLMUL)
+	target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_BIKE_R3_VPCLMUL)
     endif()
 
     message(STATUS "Enabling BIKE_R3 x86_64 optimizations")
@@ -346,44 +366,55 @@ if(KYBER512R3_AVX2_BMI2_OPT_SUPPORTED)
     FILE(GLOB KYBER512R3_AVX2_BMI2_SRCS "pq-crypto/kyber_r3/*.c")
     set_source_files_properties(${KYBER512R3_AVX2_BMI2_SRCS} PROPERTIES COMPILE_FLAGS ${KYBER512R3_AVX2_BMI2_FLAGS})
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_KYBER512R3_AVX2_BMI2)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DDS2N_KYBER512R3_AVX2_BMI2)
 
     message(STATUS "Enabling Kyber_R3 x86_64 optimizations")
 endif()
 
 if(ADX_SUPPORTED)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_ADX)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_ADX)
     message(STATUS "Support for ADX assembly instructions detected")
 endif()
 
 if(S2N_HAVE_EXECINFO)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_HAVE_EXECINFO)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_HAVE_EXECINFO)
 endif()
 
 if(S2N_CPUID_AVAILABLE)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_CPUID_AVAILABLE)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_CPUID_AVAILABLE)
 endif()
 
 target_compile_options(${PROJECT_NAME} PUBLIC -fPIC)
+target_compile_options(${PROJECT_NAME}_static PUBLIC -fPIC)
 
 target_compile_definitions(${PROJECT_NAME} PRIVATE -D_POSIX_C_SOURCE=200809L)
+target_compile_definitions(${PROJECT_NAME}_static PRIVATE -D_POSIX_C_SOURCE=200809L)
 if(CMAKE_BUILD_TYPE MATCHES Release)
     target_compile_definitions(${PROJECT_NAME} PRIVATE -D_FORTIFY_SOURCE=2)
+    target_compile_definitions(${PROJECT_NAME}_static PRIVATE -D_FORTIFY_SOURCE=2)
 endif()
 
 if(NO_STACK_PROTECTOR)
     target_compile_options(${PROJECT_NAME} PRIVATE -Wstack-protector -fstack-protector-all)
+    target_compile_options(${PROJECT_NAME}_static PRIVATE -Wstack-protector -fstack-protector-all)
 endif()
 
 if(S2N_UNSAFE_FUZZING_MODE)
     target_compile_options(${PROJECT_NAME} PRIVATE -fsanitize-coverage=trace-pc-guard -fsanitize=address,undefined,leak -fuse-ld=gold -DS2N_ADDRESS_SANITIZER=1)
+    target_compile_options(${PROJECT_NAME}_static PRIVATE -fsanitize-coverage=trace-pc-guard -fsanitize=address,undefined,leak -fuse-ld=gold -DS2N_ADDRESS_SANITIZER=1)
 endif()
 
 if (FALL_THROUGH_SUPPORTED)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_FALL_THROUGH_SUPPORTED)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N_FALL_THROUGH_SUPPORTED)
 endif()
 
 if (__RESTRICT__SUPPORTED)
     target_compile_options(${PROJECT_NAME} PUBLIC -DS2N___RESTRICT__SUPPORTED)
+    target_compile_options(${PROJECT_NAME}_static PUBLIC -DS2N___RESTRICT__SUPPORTED)
 endif()
 
 set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
@@ -458,11 +489,15 @@ else()
 endif()
 
 target_link_libraries(${PROJECT_NAME} PUBLIC ${OS_LIBS} m)
+target_link_libraries(${PROJECT_NAME}_static PUBLIC ${OS_LIBS} m)
 
 target_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
 target_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/api> $<INSTALL_INTERFACE:include>)
+target_include_directories(${PROJECT_NAME}_static PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
+target_include_directories(${PROJECT_NAME}_static PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/api> $<INSTALL_INTERFACE:include>)
 
 target_include_directories(${PROJECT_NAME} PRIVATE $<TARGET_PROPERTY:crypto,INTERFACE_INCLUDE_DIRECTORIES>)
+target_include_directories(${PROJECT_NAME}_static PRIVATE $<TARGET_PROPERTY:crypto,INTERFACE_INCLUDE_DIRECTORIES>)
 
 if (BUILD_TESTING)
     enable_testing()
@@ -576,18 +611,20 @@ install(
         RUNTIME DESTINATION bin COMPONENT Runtime
 )
 
+install(
+        TARGETS ${PROJECT_NAME}_static
+        EXPORT ${PROJECT_NAME}-targets
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Development
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Runtime
+        RUNTIME DESTINATION bin COMPONENT Runtime
+)
+
 configure_file("cmake/${PROJECT_NAME}-config.cmake"
         "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
         @ONLY)
 
-if (BUILD_SHARED_LIBS)
-   set (TARGET_DIR "shared")
-else()
-   set (TARGET_DIR "static")
-endif()
-
 install(EXPORT "${PROJECT_NAME}-targets"
-        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/${TARGET_DIR}"
+        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake"
         NAMESPACE AWS::
         COMPONENT Development)
 
diff --git a/cmake/s2n-config.cmake b/cmake/s2n-config.cmake
index 09d1c3aa..298c5b85 100644
--- a/cmake/s2n-config.cmake
+++ b/cmake/s2n-config.cmake
@@ -8,9 +8,5 @@ endif()
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")
 find_dependency(LibCrypto)
 
-if (BUILD_SHARED_LIBS)
-    include(${CMAKE_CURRENT_LIST_DIR}/shared/@PROJECT_NAME@-targets.cmake)
-else()
-    include(${CMAKE_CURRENT_LIST_DIR}/static/@PROJECT_NAME@-targets.cmake)
-endif()
+include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake)
 
-- 
2.27.0


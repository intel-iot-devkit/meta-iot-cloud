From fea2b8280b0889b5c03f628c498cae7125f2a64c Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Tue, 7 Apr 2020 20:59:53 +0100
Subject: [PATCH] Use pkg-config to find libs

Signed-off-by: Scott Ware <scott.r.ware@intel.com>

Add link options to cmake configs. Other package (such as
azure-iot-sdk-c) link library of azure-c-shared-utility
with these options to avoid the following error
...
ld: iothub_client/libiothub_client.so.1.4.1: undefined reference to `ERR_load_BIO_strings'
collect2: error: ld returned 1 exit status
...

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 CMakeLists.txt                      | 31 ++++++++++-------------------
 configs/azure_iot_build_rules.cmake |  5 +++++
 2 files changed, 15 insertions(+), 21 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e7078fee..c8c0f9d5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -116,9 +116,13 @@ if(${use_openssl})
     # If OpenSSL::SSL OR OpenSSL::Crypto are not set then you need to run
     # the find package for openssl
     if (NOT TARGET OpenSSL::SSL OR NOT TARGET OpenSSL::Crypto OR NOT ${OPENSSL_INCLUDE_DIR})
-        find_package(OpenSSL REQUIRED)
+        find_package(PkgConfig)
+        if(PKG_CONFIG_FOUND)
+            pkg_check_modules(OPENSSL libssl)
+            pkg_check_modules(CRYPTO libcrypto)
+        endif()
     endif()
-    include_directories(${OPENSSL_INCLUDE_DIR})
+    include_directories(${OPENSSL_INCLUDE_DIR} ${CRYPTO_INCLUDE_DIR})
 endif()
 
 if(${use_applessl})
@@ -511,26 +515,11 @@ if(${use_http})
         set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} crypt32 winhttp)
     else()
         if (NOT use_builtin_httpapi)
-            if (CMAKE_CROSSCOMPILING)
-                # As mentioned at https://cmake.org/Wiki/CMake_Cross_Compiling the
-                # pkg-config tool can not be used by cmake while cross compiling.
-                message(STATUS "Cross compiling not using pkg-config")
-            else()
-                # try pkg-config first
-                find_package(PkgConfig)
-                if(PKG_CONFIG_FOUND)
-                    pkg_check_modules(CURL libcurl)
-                endif()
-            endif()
-
-            # if that didn't work, try CMake find_package
-            if(NOT CURL_FOUND)
-                find_package(CURL)
+            find_package(PkgConfig)
+            if(PKG_CONFIG_FOUND)
+                pkg_check_modules(CURL libcurl)
             endif()
 
-            set(CURL_FIND_REQUIRED 1)
-            find_package_handle_standard_args(CURL DEFAULT_MSG CURL_LIBRARIES)
-
             include_directories(${CURL_INCLUDE_DIRS})
             set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} ${CURL_LIBRARIES})
         endif(NOT use_builtin_httpapi)
@@ -571,7 +560,7 @@ if(${use_bearssl})
 endif()
 
 if(${use_openssl})
-    set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} ${OPENSSL_LIBRARIES})
+    set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} ${OPENSSL_LIBRARIES} ${CRYPTO_LIBRARIES})
     if (WIN32)
         set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} crypt32 ws2_32 secur32)
     endif()
diff --git a/configs/azure_iot_build_rules.cmake b/configs/azure_iot_build_rules.cmake
index be3e14fe..4f85a2b8 100644
--- a/configs/azure_iot_build_rules.cmake
+++ b/configs/azure_iot_build_rules.cmake
@@ -76,6 +76,11 @@ elseif(UNIX) #LINUX OR APPLE
     if(NOT (IN_OPENWRT OR APPLE))
         set (CMAKE_C_FLAGS "-D_POSIX_C_SOURCE=200112L ${CMAKE_C_FLAGS}")
     endif()
+
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lssl -lcrypto")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -lssl -lcrypto")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lcurl")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -lcurl")
 endif()
 
 enable_testing()
-- 
2.27.0

